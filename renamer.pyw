#!/usr/bin/python# -*- coding: utf-8 -*-"""Renamer version 1.0Copyright (C)2008 Petr Nohejl, jestrab.netThis program is free software; you can redistribute it and/ormodify it under the terms of the GNU General Public Licenseas published by the Free Software Foundation; either version 2of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program; if not, write to the Free SoftwareFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.This program comes with ABSOLUTELY NO WARRANTY!"""### IMPORT #####################################################################import sys				# systemove funkceimport string			# retezceimport codecs			# kodovaniimport re				# regularni vyrazyimport Tkinter			# GUIimport tkFileDialog		# open file dialogimport tkMessageBox		# dialogove oknoimport tkSimpleDialogimport os				# prace se soubory a adresariimport glob				# vypis souboru a adresaru dle hvezdickove konvence### CONSTANTS ##################################################################CONST_VERSION = "1.0"							# verze programuCONST_REVISION = "21.3.2009"					# posledni revizeCONST_TITLE = "Renamer " + CONST_VERSION		# nazev programuCONST_WIDTH = 1200								# sirka oknaCONST_HEIGHT = 600								# vyska oknaCONST_ENCODE = "utf-8"							# kodovani znakuCONST_DECODE = "cp1250"							# dekodovani znaku, v OS linux nejspis pozmenit na utf-8# vypis souboru a adresaru - pozice a fontCONST_POSITION1 = 75CONST_POSITION2 = 145CONST_POSITION3 = 155CONST_FONT_FAMILY = "Lucida Console"CONST_FONT_SIZE = 8# nazvy tlacitekCONST_BUTTON_OPEN = "Open"CONST_BUTTON_UP = "Up"CONST_BUTTON_SELECT = "Select all"CONST_BUTTON_DESELECT = "Deselect all"CONST_BUTTON_REFRESH = "Refresh"CONST_BUTTON_SETTINGS = "Settings"CONST_BUTTON_ABOUT = "About"CONST_BUTTON_HELP = "Help"CONST_BUTTON_RENAME = "Rename"CONST_BUTTON_PREVIEW = "Preview"CONST_BUTTON_CLEAR = "Clear"CONST_BUTTON_EXIT = "Exit"# nazvy popiskuCONST_LABEL_DIR = "Directory"CONST_LABEL_FILTER = "Filter"CONST_LABEL_INSERTAT = "at position"CONST_LABEL_REPLACEWITH = "with"CONST_LABEL_REPLACEFROM = "from"CONST_LABEL_REPLACETO = "to"# nazvy zaskrtavatekCONST_CHECK_INSERT = "Insert"CONST_CHECK_REVERSE = "Reverse"CONST_CHECK_EXTENSION = "Extension"CONST_CHECK_REPLACE = "Replace"CONST_CHECK_COUNT = "Count"CONST_CHECK_INTERVAL = "Interval"CONST_CHECK_REGEXP = "Regular expression"CONST_CHECK_CASE = "Case sensitivity"# nazvy vyberuCONST_OPTION_OBJECT1 = "Files"CONST_OPTION_OBJECT2 = "Directories"CONST_OPTION_OBJECT3 = "Files & Directories"CONST_OPTION_CASE1 = "Convert to lower"CONST_OPTION_CASE2 = "Convert to upper"CONST_OPTION_CASE3 = "Case swap"# stavovy panelCONST_STATUS1 = "Files: "CONST_STATUS2 = "Directories: "# texty dialogovych okenCONST_OPEN_DIR = "Choose work directory please:"CONST_PATH_ERROR1 = "Error: Incorrect path"CONST_PATH_ERROR2 = "Path: "CONST_PATH_ERROR3 = " doesn't exist!"CONST_INT_ERROR1 = "Error: Incorrect array"CONST_INT_ERROR2 = "Numeric array is incorrect!\nPosition, Count and Interval must be an integers."CONST_INTERVAL_ERROR1 = "Error: Invalid interval"CONST_INTERVAL_ERROR2 = "Numeric array Interval is incorrect!\nFirst number must be smaller and both numbers must be only positive or only negative.\nZero can be used too of course."CONST_REGEXP_ERROR1 = "Error: Invalid regular expression"CONST_REGEXP_ERROR2 = "Regular expression is incorrect!"CONST_NAME_ERROR1 = "Error: Incorrect filename"CONST_NAME_ERROR2 = "New name of some file or directory is empty!"CONST_COLLISION_ERROR1 = "Error: Collision in filenames"CONST_COLLISION_ERROR2 = "Collision in new filename "CONST_COLLISION_ERROR3 = "!\nCannot rename files with the same name."CONST_SELECT_WARN1 = "Warning: Invalid selection"CONST_SELECT_WARN2 = "No files or directories were selected!"CONST_RENAME_WARN1 = "Warning: Nothing to do"CONST_RENAME_WARN2 = "Nothing to rename! No changes were detected!\nUse functions Insert or Replace to rename files or directories."CONST_RENAME_MSG1 = "Rename report"CONST_RENAME_MSG2 = " files or directories\nwere successfully renamed!"# helpCONST_HELP1 = "Help"CONST_HELP2 = "\How to rename (step by step):\n\\n\1) CHOOSE THE WORK DIRECTORY: press Open button and choose dir or set the path in the text array\n\2) SELECT THE TYPE OF OBJECTS: select the type of objects, which you want to rename, you can choose files, directories or both\n\3) USE THE FILTER: you can use the filter, which uses Unix style pattern expansion, for show only some files or dirs from work dir,\n\set the filter and press enter or Refresh button, you should see the list of objects, which you chose, it shows current name, new name, type, size,\n\examples: * show all; *.jpg show files with extension .jpg; *.?? show files with 2-chars extension; [a-cz]* show files with first letter a,b,c,z\n\4) USE THE INSERT FUNCTION: this function insert a string into the filename, check the Insert checkbox and enter the string,\n\set the position, where the string will be placed, check the Reverse checkbox to count the position reversly,\n\check the Extension checkbox if you want to work also with the file extension\n\5) USE THE REPLACE FUNCTION: this function replace some string with another string, check the Replace checkbox and enter the strings,\n\check the Count checkbox and enter the count number (integer) if you want to replace the string only n-times,\n\check the Interval checkbox and enter the interval numbers (integers) if you want to replace the string only on specific interval,\n\you can also use negative indexes in the interval, first index must be smaller and both indexes must be only positive or only negative,\n\examples: 0 1 means first letter; 3 8 means 4. - 8. letters, -1 0 means last letter, -3 0 means last three letters,\n\check the Regular expression checkbox if you want to work with regular expression (uses in first text array),\n\check the Extension checkbox if you want to work also with the file extension\n\6) USE THE CASE SENSITIVITY FUNCTION: this function convert string to lower or upper case letters or swap the case letters,\n\check the Case sensitivity checkbox and choose one of the options,\n\check the Interval checkbox and enter the interval numbers (integers) if you want to convert the string only on specific interval,\n\you can also use negative indexes in the interval, first index must be smaller and both indexes must be only positive or only negative,\n\check the Extension checkbox if you want to work also with the file extension\n\7) PREVIEW & RENAME: before renaming, you must press Preview button to refresh the new filenames,\n\press Preview button, select the objects from the list, which you want to rename, press the Rename button and your files or dirs will be renamed,\n\press Select all button if you want to select all objects in the list,\n\press Deselect all button if you want to deselect all objects in the list,\n\press Clear button if you want to clear all text arrays in Insert, Replace and Case sensitivity functions\n\"# aboutCONST_ABOUT1 = "About"CONST_ABOUT2 = "\Renamer version " + CONST_VERSION + ", last revision: " + CONST_REVISION + "\n\\n\Copyright (C)2008 Petr Nohejl, jestrab.net\n\\n\This program is free software; you can redistribute it and/or\n\modify it under the terms of the GNU General Public License\n\as published by the Free Software Foundation; either version 2\n\of the License, or (at your option) any later version.\n\\n\This program is distributed in the hope that it will be useful,\n\but WITHOUT ANY WARRANTY; without even the implied warranty of\n\MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\GNU General Public License for more details.\n\\n\You should have received a copy of the GNU General Public License\n\along with this program; if not, write to the Free Software\n\Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\\n\This program comes with ABSOLUTELY NO WARRANTY!\n\"### RENAMER ####################################################################class Renamer:		# inicializace	def __init__(self):		self.CreateWidgets()		self.Refresh(None)			# beh programu	def Run(self):		self.root.mainloop()			# vytvori GUI	def CreateWidgets(self):				### GUI VARIABLES ######################################################			self.root = Tkinter.Tk()						# vytvori hlavni okno programu		self.root.title(CONST_TITLE)					# nazev programu		self.root.minsize(CONST_WIDTH, CONST_HEIGHT)	# velikost okna				self.dirPath = Tkinter.StringVar()				# pracovni adresar		self.dirPath.set(os.getcwd())		self.itemType = Tkinter.StringVar()				# typ elementu - adresare nebo soubory		self.itemType.set(CONST_OPTION_OBJECT1)		self.filter = Tkinter.StringVar()				# filtr - pouziva hvezdickovou konvenci		self.filter.set("*")				self.insert = Tkinter.BooleanVar()				# funkce insert		self.insert.set(False)		self.insertStr = Tkinter.StringVar()			# vkladany retezec		self.insertStr.set("")		self.insertInt = Tkinter.StringVar()			# pozice vkladaneho retezce		self.insertInt.set("0")		self.insertReverse = Tkinter.BooleanVar()		# pocitat pozici odzadu		self.insertReverse.set(False)		self.insertExtension = Tkinter.BooleanVar()		# koncovka souboru		self.insertExtension.set(False)				self.replace = Tkinter.BooleanVar()				# funkce replace		self.replace.set(False)		self.replaceStr1 = Tkinter.StringVar()			# nahrazovany retezec		self.replaceStr1.set("")		self.replaceStr2 = Tkinter.StringVar()			# novy retezec		self.replaceStr2.set("")		self.replaceCount = Tkinter.BooleanVar()		# funkce nahrazeni		self.replaceCount.set(False)		self.replaceInt1 = Tkinter.StringVar()			# pocet nahrazeni		self.replaceInt1.set("1")		self.replaceInterval = Tkinter.BooleanVar()		# funkce interval		self.replaceInterval.set(False)		self.replaceInt2 = Tkinter.StringVar()			# interval od		self.replaceInt2.set("0")		self.replaceInt3 = Tkinter.StringVar()			# interval do		self.replaceInt3.set("1")		self.replaceRegexp = Tkinter.BooleanVar()		# regularni vyraz		self.replaceRegexp.set(False)		self.replaceExtension = Tkinter.BooleanVar()	# koncovka souboru		self.replaceExtension.set(False)				self.case = Tkinter.BooleanVar()				# funkce case sensitivity		self.case.set(False)		self.caseType = Tkinter.StringVar()				# typ funkce - prevod na male/velke nebo prohozeni		self.caseType.set(CONST_OPTION_CASE1)		self.caseInterval = Tkinter.BooleanVar()		# funkce interval		self.caseInterval.set(False)		self.caseInt1 = Tkinter.StringVar()				# interval od		self.caseInt1.set("0")		self.caseInt2 = Tkinter.StringVar()				# interval do		self.caseInt2.set("1")		self.caseExtension = Tkinter.BooleanVar()		# koncovka souboru		self.caseExtension.set(False)				### FRAME 1 - CHOOSING ITEMS ###########################################				self.frame1 = Tkinter.Frame(self.root)		self.frame1.pack(side = Tkinter.TOP, fill = Tkinter.X, padx=6, pady=4)				self.buttonOpen = Tkinter.Button(self.frame1, text = CONST_BUTTON_OPEN, command = self.OpenDir)		self.buttonOpen.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.labelDir = Tkinter.Label(self.frame1, text = CONST_LABEL_DIR)		self.labelDir.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryDir = Tkinter.Entry(self.frame1, textvariable = self.dirPath, width=50)		self.entryDir.bind('<Key-Return>', self.Refresh)		self.entryDir.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.buttonUp = Tkinter.Button(self.frame1, text = CONST_BUTTON_UP, command = self.DirUp)		self.buttonUp.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.optionType = Tkinter.OptionMenu(self.frame1, self.itemType, CONST_OPTION_OBJECT1, CONST_OPTION_OBJECT2, CONST_OPTION_OBJECT3, command = self.Refresh)		self.optionType.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.labelFilter = Tkinter.Label(self.frame1, text = CONST_LABEL_FILTER)		self.labelFilter.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryFilter = Tkinter.Entry(self.frame1, textvariable = self.filter, width=10)		self.entryFilter.bind('<Key-Return>', self.Refresh)		self.entryFilter.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.buttonRefresh = Tkinter.Button(self.frame1, text = CONST_BUTTON_REFRESH, command = self.CallRefresh)		self.buttonRefresh.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.buttonSelect = Tkinter.Button(self.frame1, text = CONST_BUTTON_SELECT, command = self.SelectAll)		self.buttonSelect.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.buttonDeselect = Tkinter.Button(self.frame1, text = CONST_BUTTON_DESELECT, command = self.DeselectAll)		self.buttonDeselect.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.buttonSettings = Tkinter.Button(self.frame1, text = CONST_BUTTON_SETTINGS)		#self.buttonSettings.pack(side = Tkinter.RIGHT, fill = Tkinter.X)				self.buttonAbout = Tkinter.Button(self.frame1, text = CONST_BUTTON_ABOUT, command = self.About)		self.buttonAbout.pack(side = Tkinter.RIGHT, fill = Tkinter.X)				self.buttonHelp = Tkinter.Button(self.frame1, text = CONST_BUTTON_HELP, command = self.Help)		self.buttonHelp.pack(side = Tkinter.RIGHT, fill = Tkinter.X)						### FRAME 2 - VIEW ITEMS ###############################################				self.frame2 = Tkinter.Frame(self.root)		self.frame2.pack(side = Tkinter.TOP, expand = Tkinter.YES, fill = Tkinter.BOTH, padx=6, pady=4)				self.itemList = Tkinter.Listbox(self.frame2, selectmode=Tkinter.EXTENDED, width=120, height=30, font=(CONST_FONT_FAMILY, CONST_FONT_SIZE, ""))		self.itemList.pack(side = Tkinter.LEFT, expand = Tkinter.YES, fill = Tkinter.BOTH)				self.scrollItemList = Tkinter.Scrollbar(self.frame2)		self.scrollItemList.pack(side = Tkinter.LEFT, fill = Tkinter.Y)				self.scrollItemList["command"] = self.itemList.yview		self.itemList["yscrollcommand"] = self.scrollItemList.set		### FRAME 3 - INSERT ###################################################				self.frame3 = Tkinter.Frame(self.root)		self.frame3.pack(side = Tkinter.TOP, fill = Tkinter.X, padx=6, pady=4)				self.checkInsert = Tkinter.Checkbutton(self.frame3, text = CONST_CHECK_INSERT, variable = self.insert, command = self.UseInsert)		self.insert.set(self.insert.get()%1)		self.checkInsert.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryInsertStr = Tkinter.Entry(self.frame3, textvariable = self.insertStr, width=30, state="disabled")		self.entryInsertStr.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.labelInsertAt = Tkinter.Label(self.frame3, text = CONST_LABEL_INSERTAT, state="disabled")		self.labelInsertAt.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryInsertAt = Tkinter.Entry(self.frame3, textvariable = self.insertInt, width=5, state="disabled")		self.entryInsertAt.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.checkInsertReverse = Tkinter.Checkbutton(self.frame3, text = CONST_CHECK_REVERSE, variable = self.insertReverse, state="disabled")		self.insertReverse.set(self.insertReverse.get()%1)		self.checkInsertReverse.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.checkInsertExtension = Tkinter.Checkbutton(self.frame3, text = CONST_CHECK_EXTENSION, variable = self.insertExtension, state="disabled")		self.insertExtension.set(self.insertExtension.get()%1)		self.checkInsertExtension.pack(side = Tkinter.LEFT, fill = Tkinter.X)						### FRAME 4 - REPLACE ##################################################				self.frame4 = Tkinter.Frame(self.root)		self.frame4.pack(side = Tkinter.TOP, fill = Tkinter.X, padx=6, pady=4)				self.checkReplace = Tkinter.Checkbutton(self.frame4, text = CONST_CHECK_REPLACE, variable = self.replace, command = self.UseReplace)		self.replace.set(self.replace.get()%1)		self.checkReplace.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryReplaceStr = Tkinter.Entry(self.frame4, textvariable = self.replaceStr1, width=30, state="disabled")		self.entryReplaceStr.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.labelReplaceWith = Tkinter.Label(self.frame4, text = CONST_LABEL_REPLACEWITH, state="disabled")		self.labelReplaceWith.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryReplaceWith = Tkinter.Entry(self.frame4, textvariable = self.replaceStr2, width=30, state="disabled")		self.entryReplaceWith.pack(side = Tkinter.LEFT, fill = Tkinter.X)		self.checkReplaceCount = Tkinter.Checkbutton(self.frame4, text = CONST_CHECK_COUNT, variable = self.replaceCount, command = self.UseCount, state="disabled")		self.replaceCount.set(self.replaceCount.get()%1)		self.checkReplaceCount.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryReplaceCount = Tkinter.Entry(self.frame4, textvariable = self.replaceInt1, width=5, state="disabled")		self.entryReplaceCount.pack(side = Tkinter.LEFT, fill = Tkinter.X)		self.checkReplaceInterval = Tkinter.Checkbutton(self.frame4, text = CONST_CHECK_INTERVAL, variable = self.replaceInterval, command = self.UseReplaceInterval, state="disabled")		self.replaceInterval.set(self.replaceInterval.get()%1)		self.checkReplaceInterval.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.labelReplaceFrom = Tkinter.Label(self.frame4, text = CONST_LABEL_REPLACEFROM, state="disabled")		self.labelReplaceFrom.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryReplaceFrom = Tkinter.Entry(self.frame4, textvariable = self.replaceInt2, width=5, state="disabled")		self.entryReplaceFrom.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.labelReplaceTo = Tkinter.Label(self.frame4, text = CONST_LABEL_REPLACETO, state="disabled")		self.labelReplaceTo.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryReplaceTo = Tkinter.Entry(self.frame4, textvariable = self.replaceInt3, width=5, state="disabled")		self.entryReplaceTo.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.checkReplaceRegexp = Tkinter.Checkbutton(self.frame4, text = CONST_CHECK_REGEXP, variable = self.replaceRegexp, state="disabled")		self.replaceRegexp.set(self.replaceRegexp.get()%1)		self.checkReplaceRegexp.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.checkReplaceExtension = Tkinter.Checkbutton(self.frame4, text = CONST_CHECK_EXTENSION, variable = self.replaceExtension, state="disabled")		self.replaceExtension.set(self.replaceExtension.get()%1)		self.checkReplaceExtension.pack(side = Tkinter.LEFT, fill = Tkinter.X)						### FRAME 5 - CASE SENSITIVITY #########################################				self.frame5 = Tkinter.Frame(self.root)		self.frame5.pack(side = Tkinter.TOP, fill = Tkinter.X, padx=6, pady=4)				self.checkCase = Tkinter.Checkbutton(self.frame5, text = CONST_CHECK_CASE, variable = self.case, command = self.UseCase)		self.case.set(self.case.get()%1)		self.checkCase.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.optionCase = Tkinter.OptionMenu(self.frame5, self.caseType, CONST_OPTION_CASE1, CONST_OPTION_CASE2, CONST_OPTION_CASE3)		self.optionCase["state"] = "disabled"		self.optionCase.pack(side = Tkinter.LEFT, fill = Tkinter.X)		self.checkCaseInterval = Tkinter.Checkbutton(self.frame5, text = CONST_CHECK_INTERVAL, variable = self.caseInterval, command = self.UseCaseInterval, state="disabled")		self.caseInterval.set(self.caseInterval.get()%1)		self.checkCaseInterval.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.labelCaseFrom = Tkinter.Label(self.frame5, text = CONST_LABEL_REPLACEFROM, state="disabled")		self.labelCaseFrom.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryCaseFrom = Tkinter.Entry(self.frame5, textvariable = self.caseInt1, width=5, state="disabled")		self.entryCaseFrom.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.labelCaseTo = Tkinter.Label(self.frame5, text = CONST_LABEL_REPLACETO, state="disabled")		self.labelCaseTo.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.entryCaseTo = Tkinter.Entry(self.frame5, textvariable = self.caseInt2, width=5, state="disabled")		self.entryCaseTo.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.checkCaseExtension = Tkinter.Checkbutton(self.frame5, text = CONST_CHECK_EXTENSION, variable = self.caseExtension, state="disabled")		self.caseExtension.set(self.caseExtension.get()%1)		self.checkCaseExtension.pack(side = Tkinter.LEFT, fill = Tkinter.X)						### FRAME 6 - BUTTONS ##################################################				self.frame6 = Tkinter.Frame(self.root)		self.frame6.pack(side = Tkinter.TOP, fill = Tkinter.X, padx=6, pady=4)				self.buttonPreview = Tkinter.Button(self.frame6, text = CONST_BUTTON_PREVIEW, command = self.CallRefresh)		self.buttonPreview.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.buttonRename = Tkinter.Button(self.frame6, text = CONST_BUTTON_RENAME, command = self.Rename)		self.buttonRename.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.buttonClear = Tkinter.Button(self.frame6, text = CONST_BUTTON_CLEAR, command = self.Clear)		self.buttonClear.pack(side = Tkinter.LEFT, fill = Tkinter.X)				self.buttonExit = Tkinter.Button(self.frame6, text = CONST_BUTTON_EXIT, command = sys.exit)		self.buttonExit.pack(side = Tkinter.LEFT, fill = Tkinter.X)						### FRAME 7 - STATUS BAR ###############################################				self.frame7 = Tkinter.Frame(self.root, relief="groove", borderwidth=1)		self.frame7.pack(side = Tkinter.TOP, fill = Tkinter.X)				self.labelStatus = Tkinter.Label(self.frame7, text = "")		self.labelStatus.pack(side = Tkinter.LEFT, fill = Tkinter.X)	### REFRESH FUNCTION #######################################################		def Refresh(self, event):				### osetreni chyb v ciselnych polich ###################################				errInt = 0		# priznak chyby				if(self.insert.get() == True):			# je self.insertInt skutecne int?			for x in range(len(self.insertInt.get())):				if((self.insertInt.get()[x] in string.digits) == False):					insertIntTmp = 0					self.insertInt.set("0")					errInt = 1					break			insertIntTmp = int(self.insertInt.get())				if(self.replace.get() == True):			if(self.replaceCount.get() == True):				# je self.replaceInt1 skutecne int?				for x in range(len(self.replaceInt1.get())):					if((self.replaceInt1.get()[x] in string.digits) == False):						replaceInt1Tmp = 1						self.replaceInt1.set("1")						errInt = 2						break				replaceInt1Tmp = int(self.replaceInt1.get())						if(self.replaceInterval.get() == True):				# je self.replaceInt2 skutecne int?				for x in range(len(self.replaceInt2.get())):					if((self.replaceInt2.get()[x] in string.digits) == False):						if not(x == 0 and self.replaceInt2.get()[x] == "-" and len(self.replaceInt2.get()) > 1):							replaceInt2Tmp = 0							self.replaceInt2.set("0")							errInt = 2							break				replaceInt2Tmp = int(self.replaceInt2.get())								# je self.replaceInt3 skutecne int?				for x in range(len(self.replaceInt3.get())):					if((self.replaceInt3.get()[x] in string.digits) == False):						if not(x == 0 and self.replaceInt3.get()[x] == "-" and len(self.replaceInt3.get()) > 1):							replaceInt3Tmp = 1							self.replaceInt3.set("1")							errInt = 2							break				replaceInt3Tmp = int(self.replaceInt3.get())					if(self.case.get() == True and self.caseInterval.get() == True):			# je self.caseInt1 skutecne int?			for x in range(len(self.caseInt1.get())):				if((self.caseInt1.get()[x] in string.digits) == False):					if not(x == 0 and self.caseInt1.get()[x] == "-" and len(self.caseInt1.get()) > 1):						caseInt1Tmp = 0						self.caseInt1.set("0")						errInt = 3						break			caseInt1Tmp = int(self.caseInt1.get())						# je self.caseInt2 skutecne int?			for x in range(len(self.caseInt2.get())):				if((self.caseInt2.get()[x] in string.digits) == False):					if not(x == 0 and self.caseInt2.get()[x] == "-" and len(self.caseInt2.get()) > 1):						caseInt2Tmp = 1						self.caseInt2.set("1")						errInt = 3						break			caseInt2Tmp = int(self.caseInt2.get())					# neplatny znak v ciselnem poli u Insert		if(errInt == 1):			self.IntError()			return				# neplatny znak v ciselnem poli u Replace		if(errInt == 2):			self.IntError()			return					# neplatny znak v ciselnem poli u Case sensitivity		if(errInt == 3):			self.IntError()			return				# neplatny interval u Replace		if(self.replace.get() == True and self.replaceInterval.get() == True):			if((replaceInt2Tmp >= replaceInt3Tmp) or (replaceInt2Tmp < 0 and replaceInt3Tmp > 0)):				self.IntervalError()				return						# neplatny interval u Case sensitivity		if(self.case.get() == True and self.caseInterval.get() == True):			if((caseInt1Tmp >= caseInt2Tmp) or (caseInt1Tmp < 0 and caseInt2Tmp > 0)):				self.IntervalError()				return						# kontrola spravnosti regularniho vyrazu		if(self.replaceRegexp.get() == True and self.replace.get() == True):			try:				regexp = re.compile(self.replaceStr1.get())			except re.error:				self.RegexpError()				return								### nacte vsechny elementy (soubory a adresare) v aktualnim adresari ###					self.itemList.delete(0, Tkinter.END)					# vymaze aktualni seznam elementu				if(os.path.exists(self.dirPath.get()) == True):			# pokud cesta existuje			os.chdir(self.dirPath.get())						# nastavi aktualni adresar		else:			self.PathError()									# cesta neexistuje			os.chdir(os.getcwd())								# nastavi aktualni adresar			#self.dirPath.set(os.getcwd())						# bez pouziti kodovani			self.dirPath.set(codecs.decode(os.getcwd(), CONST_DECODE))				# najde vsechny elementy dle hvezdickove konvence, pouziva dane kodovani		if(self.filter.get() == ""):			#items = glob.glob("*")								# bez pouziti kodovani			items = []			x = 0			while(x < len(glob.glob("*"))):				items.append(codecs.decode(glob.glob("*")[x], CONST_DECODE))				x = x+1		else:			#items = glob.glob(self.filter.get())				# bez pouziti kodovani			items = []			x = 0			while(x < len(glob.glob(self.filter.get()))):				items.append(codecs.decode(glob.glob(self.filter.get())[x], CONST_DECODE))				x = x+1						### promenne ###########################################################				self.itemsOrig = []										# seznam elementu s puvodnim nazvem		self.itemsNew = []										# seznam elementu s novym nazvem		n = 1													# aktualni element		m = len(items)											# pocet elementu celkem		cnt	= 1													# pocitadlo		cntDirs = 0												# pocitadlo adresaru			### vklada nove elementy do seznamu ####################################				while(n <= m):			path = os.path.join(self.dirPath.get(), items[n-1])	# sestavi cestu k aktualnimu elementu			isdir = os.path.isdir(path) 						# je element adresarem?						if(self.itemType.get() == CONST_OPTION_OBJECT1):			# pracuji jen se soubory				if(isdir == True):					n = n+1					continue			elif(self.itemType.get() == CONST_OPTION_OBJECT2):			# pracuji jen s adresari				if(isdir == False):					n = n+1					continue						self.itemsOrig.append(items[n-1])					# nastaveni seznamu elementu s puvodnim nazvem			self.itemsNew.append(items[n-1])					# nastaveni seznamu elementu s novym nazvem						### operace Replace ################################################						if(self.replace.get() == True):				# pocet prejmenovani				if(self.replaceCount.get() == True):	# konecny pocet nahrazeni					cntr = replaceInt1Tmp				elif(self.replaceRegexp.get() == True):					cntr = 0	# pro neomezeny pocet nahrazeni pouziva funkce re.sub konstantu 0				else:					cntr = -1	# pro neomezeny pocet nahrazeni pouziva funkce string.replace konstantu -1								# koncovka souboru				if(self.replaceExtension.get() == True):					extens1 = []					extens1.append(self.itemsNew[cnt-1])				else:					extens1 = string.split(self.itemsNew[cnt-1],".")								# interval				if(self.replaceInterval.get() == True):					# prepocitani zapornych indexu 					if(replaceInt2Tmp < 0 or replaceInt3Tmp < 0):						frm = replaceInt2Tmp + len(extens1[0])						to = replaceInt3Tmp + len(extens1[0])						if(frm < 0): frm = 0					else:						frm = replaceInt2Tmp						to = replaceInt3Tmp					extentsCopy = extens1[0]					extens1[0] = extens1[0][frm:to]									# nahrada				if(self.replaceRegexp.get() == True):	# regularni vyraz					self.itemsNew[cnt-1] = re.sub(regexp, self.replaceStr2.get(), extens1[0], cntr)				else:					self.itemsNew[cnt-1] = string.replace(extens1[0], self.replaceStr1.get(), self.replaceStr2.get(), cntr)								# pokud pracujeme v intervalu				if(self.replaceInterval.get() == True):					# vloz zpatky znaky ktere nebyly v intervalu					self.itemsNew[cnt-1] = extentsCopy[:frm] + self.itemsNew[cnt-1] + extentsCopy[to:]								# pokud nepracujeme i s koncovkou				if(self.replaceExtension.get() == False):					x = 1					while(x < len(extens1)):						# vloz nakonec koncovku						self.itemsNew[cnt-1] = self.itemsNew[cnt-1] + "." + extens1[x]						x = x+1													### operace Insert #################################################						if(self.insert.get() == True):				# pocitat pozici odzadu				if(self.insertReverse.get() == True):					ind = len(self.itemsNew[cnt-1]) - insertIntTmp					if(ind < 0): ind = 0				else:					ind = insertIntTmp								# koncovka souboru				if(self.insertExtension.get() == True):					extens2 = []					extens2.append(self.itemsNew[cnt-1])				else:					extens2 = string.split(self.itemsNew[cnt-1], ".", 1)								# vlozeni				self.itemsNew[cnt-1] = extens2[0][:ind] + self.insertStr.get() + extens2[0][ind:]								# pokud nepracujeme i s koncovkou				if(self.insertExtension.get() == False):					x = 1					while(x < len(extens2)):						# vloz nakonec koncovku						self.itemsNew[cnt-1] = self.itemsNew[cnt-1] + "." + extens2[x]						x = x+1							### operace Case sensitivity #######################################						if(self.case.get() == True):				# koncovka souboru				if(self.caseExtension.get() == True):					extens3 = []					extens3.append(self.itemsNew[cnt-1])				else:					extens3 = string.split(self.itemsNew[cnt-1],".")								# interval				if(self.caseInterval.get() == True):					# prepocitani zapornych indexu 					if(caseInt1Tmp < 0 or caseInt2Tmp < 0):						frm = caseInt1Tmp + len(extens3[0])						to = caseInt2Tmp + len(extens3[0])						if(frm < 0): frm = 0					else:						frm = caseInt1Tmp						to = caseInt2Tmp					extentsCopy = extens3[0]					extens3[0] = extens3[0][frm:to]									# case operace				if(self.caseType.get() == CONST_OPTION_CASE1):					self.itemsNew[cnt-1] = string.lower(extens3[0])				elif(self.caseType.get() == CONST_OPTION_CASE2):					self.itemsNew[cnt-1] = string.upper(extens3[0])				elif(self.caseType.get() == CONST_OPTION_CASE3):					self.itemsNew[cnt-1] = string.swapcase(extens3[0])				# pokud pracujeme v intervalu				if(self.caseInterval.get() == True):					# vloz zpatky znaky ktere nebyly v intervalu					self.itemsNew[cnt-1] = extentsCopy[:frm] + self.itemsNew[cnt-1] + extentsCopy[to:]								# pokud nepracujeme i s koncovkou				if(self.caseExtension.get() == False):					x = 1					while(x < len(extens3)):						# vloz nakonec koncovku						self.itemsNew[cnt-1] = self.itemsNew[cnt-1] + "." + extens3[x]						x = x+1															### vypis dat do seznamu elementu ##################################						# cislo aktualniho elementu, zarovnava doplnovanim 0			number = (len(str(m)) - len(str(cnt)))*"0" + str(cnt) + "   "						# puvodni nazev			name = self.itemsOrig[cnt-1]						# oddelovac 1			separator1 = (CONST_POSITION1 - len(number + name))*" "						# novy nazev			newname = self.itemsNew[cnt-1]						# oddelovac 2			separator2 = (CONST_POSITION2 - len(number + name + separator1 + newname))*" "						# typ elementu			if(isdir == True): 				type = "DIR"			else: 				type = os.path.splitext(path)[-1][1:]				#type = string.split(self.itemsOrig[cnt-1], ".", 1)[-1]			# koncovka od prvni nalezene .						# oddelovac 3			separator3 = (CONST_POSITION3 - len(number + name + separator1 + newname + separator2 + type))*" "						# velikost souboru			if(isdir == False): 				sizeByte = os.path.getsize(path)				sizeKbyte = sizeByte/1024.0				sizeMbyte = sizeKbyte/1024.0				sizeGbyte = sizeMbyte/1024.0				if(sizeKbyte < 1000):					temp = string.split(str(sizeKbyte), ".")					size = temp[0] + "." + temp[1][0] + " kB"				elif(sizeKbyte >= 1000 and sizeMbyte < 1000):					temp = string.split(str(sizeMbyte), ".")					size = temp[0] + "." + temp[1][0] + " MB"				elif(sizeMbyte >= 1000):					temp = string.split(str(sizeGbyte), ".")					size = temp[0] + "." + temp[1][0] + " GB"			else:				size = ""						# vlozi do seznamu elementu			finalStr = number + name + separator1 + newname + separator2 + type + separator3 + size			self.itemList.insert(Tkinter.END, codecs.encode(finalStr, CONST_ENCODE))						# nastaveni ridicich promennych 			n = n+1			cnt = cnt+1			if(isdir == True): 				cntDirs = cntDirs+1					self.Status(cnt, cntDirs)	# vypis stavoveho radku				### OTHER FUNCTIONS ########################################################					# vola Refresh	def CallRefresh(self):		self.Refresh(None)					# vyber adresare	def OpenDir(self):		self.dirPath.set(tkFileDialog.askdirectory(mustexist=True, title=CONST_OPEN_DIR))		self.Refresh(None)			# posunout o adresar vyse	def DirUp(self):		self.dirPath.set(os.path.split(self.dirPath.get())[0])		self.Refresh(None)					# vybrat vse	def SelectAll(self):		self.Refresh(None)		self.itemList.selection_set(0, Tkinter.END)					# odebrat vse	def DeselectAll(self):		self.Refresh(None)		self.itemList.selection_clear(0, Tkinter.END)					# funkce clear	def Clear(self):		self.insertStr.set("")		self.insertInt.set("0")		self.replaceStr1.set("")		self.replaceStr2.set("")		self.replaceInt1.set("1")		self.replaceInt2.set("0")		self.replaceInt3.set("1")		self.caseInt1.set("0")		self.caseInt2.set("1")					# stavovy radek	def Status(self, cnt, cntDirs):		stats = CONST_STATUS1 + str(cnt-cntDirs-1) + "   " + CONST_STATUS2 + str(cntDirs)		self.labelStatus["text"] = stats			# prejmenovani	def Rename(self):		# warning - zadna zmena		if(self.itemsOrig == self.itemsNew):			self.RenameWarn()			return				# error - prazdny nazev		for x in range(len(self.itemsOrig)):			if(self.itemList.selection_includes(x) == True):	# zpracovava jen oznacene elementy				if(self.itemsNew[x] == ""):					self.NameError()					return							# error - kolize v nazvech		x = 0		while(x < len(self.itemsNew)):			temp = self.itemsNew[x]						y = 0			while(y < len(self.itemsNew)):				if(temp == self.itemsNew[y] and x != y):					self.CollisionError(temp)					return				y = y+1							x = x+1			y = 0				# prejmenovani		cnt = 0													# pocet prejmenovanych elementu		for y in range(len(self.itemsOrig)):			if(self.itemList.selection_includes(y) == True):	# zpracovava jen oznacene elementy				os.rename(self.itemsOrig[y], self.itemsNew[y])	# prejmenovani				cnt = cnt + 1				# warning - zadny vyber		if(cnt == 0):			self.SelectWarn()			return		else:			self.RenameMsg(cnt)					self.Refresh(None)	# vysledek prejmenovani	def RenameMsg(self, cnt):		tkMessageBox.showinfo(CONST_RENAME_MSG1, str(cnt) + CONST_RENAME_MSG2)	# error - cesta neexistuje	def PathError(self):		tkMessageBox.showerror(CONST_PATH_ERROR1, CONST_PATH_ERROR2 + self.dirPath.get() + CONST_PATH_ERROR3)			# error - neplatny znak v ciselnem poli	def IntError(self):		tkMessageBox.showerror(CONST_INT_ERROR1, CONST_INT_ERROR2)					# error - neplatny interval	def IntervalError(self):		tkMessageBox.showerror(CONST_INTERVAL_ERROR1, CONST_INTERVAL_ERROR2)					# error - neplatny regularni vyraz	def RegexpError(self):		tkMessageBox.showerror(CONST_REGEXP_ERROR1, CONST_REGEXP_ERROR2)					# error - prazdny nazev	def NameError(self):		tkMessageBox.showerror(CONST_NAME_ERROR1, CONST_NAME_ERROR2)					# error - kolize v nazvech	def CollisionError(self, filename):		tkMessageBox.showerror(CONST_COLLISION_ERROR1, CONST_COLLISION_ERROR2 + filename + CONST_COLLISION_ERROR3)					# warning - zadny vyber	def SelectWarn(self):		tkMessageBox.showwarning(CONST_SELECT_WARN1, CONST_SELECT_WARN2)			# warning - zadna zmena	def RenameWarn(self):		tkMessageBox.showwarning(CONST_RENAME_WARN1, CONST_RENAME_WARN2)					# help	def Help(self):		tkMessageBox.showinfo(CONST_HELP1, CONST_HELP2)		#HelpWindow(self.root, CONST_HELP1)					# about	def About(self):		tkMessageBox.showinfo(CONST_ABOUT1, CONST_ABOUT2)			# pouziju funkci Insert	def UseInsert(self):		if(self.insert.get() == True):			self.entryInsertStr["state"] = "normal"			self.labelInsertAt["state"] = "normal"			self.entryInsertAt["state"] = "normal"			self.checkInsertReverse["state"] = "normal"			self.checkInsertExtension["state"] = "normal"		else:			self.entryInsertStr["state"] = "disabled"			self.labelInsertAt["state"] = "disabled"			self.entryInsertAt["state"] = "disabled"			self.checkInsertReverse["state"] = "disabled"			self.checkInsertExtension["state"] = "disabled"							# pouziju funkci Replace	def UseReplace(self):		if(self.replace.get() == True):			self.entryReplaceStr["state"] = "normal"			self.labelReplaceWith["state"] = "normal"			self.entryReplaceWith["state"] = "normal"			self.checkReplaceCount["state"] = "normal"			self.entryReplaceCount["state"] = "normal"			self.checkReplaceInterval["state"] = "normal"			self.labelReplaceFrom["state"] = "normal"			self.entryReplaceFrom["state"] = "normal"			self.labelReplaceTo["state"] = "normal"			self.entryReplaceTo["state"] = "normal"			self.checkReplaceRegexp["state"] = "normal"			self.checkReplaceExtension["state"] = "normal"		else:			self.entryReplaceStr["state"] = "disabled"			self.labelReplaceWith["state"] = "disabled"			self.entryReplaceWith["state"] = "disabled"			self.checkReplaceCount["state"] = "disabled"			self.entryReplaceCount["state"] = "disabled"			self.checkReplaceInterval["state"] = "disabled"			self.labelReplaceFrom["state"] = "disabled"			self.entryReplaceFrom["state"] = "disabled"			self.labelReplaceTo["state"] = "disabled"			self.entryReplaceTo["state"] = "disabled"			self.checkReplaceRegexp["state"] = "disabled"			self.checkReplaceExtension["state"] = "disabled"		self.UseCount()		self.UseReplaceInterval()					# pouziju funkci Case sensitivity	def UseCase(self):		if(self.case.get() == True):			self.optionCase["state"] = "normal"			self.checkCaseInterval["state"] = "normal"			self.labelCaseFrom["state"] = "normal"			self.entryCaseFrom["state"] = "normal"			self.labelCaseTo["state"] = "normal"			self.entryCaseTo["state"] = "normal"			self.checkCaseExtension["state"] = "normal"		else:			self.optionCase["state"] = "disabled"			self.checkCaseInterval["state"] = "disabled"			self.labelCaseFrom["state"] = "disabled"			self.entryCaseFrom["state"] = "disabled"			self.labelCaseTo["state"] = "disabled"			self.entryCaseTo["state"] = "disabled"			self.checkCaseExtension["state"] = "disabled"		self.UseCaseInterval()			# pouziju funkci Count	def UseCount(self):		if(self.replaceCount.get() == True and self.replace.get() == True):			self.entryReplaceCount["state"] = "normal"		else:			self.entryReplaceCount["state"] = "disabled"				# pouziju funkci Interval u Replace	def UseReplaceInterval(self):		if(self.replaceInterval.get() == True and self.replace.get() == True):			self.labelReplaceFrom["state"] = "normal"			self.entryReplaceFrom["state"] = "normal"			self.labelReplaceTo["state"] = "normal"			self.entryReplaceTo["state"] = "normal"		else:			self.labelReplaceFrom["state"] = "disabled"			self.entryReplaceFrom["state"] = "disabled"			self.labelReplaceTo["state"] = "disabled"			self.entryReplaceTo["state"] = "disabled"							# pouziju funkci Interval u Case sensitivity	def UseCaseInterval(self):		if(self.caseInterval.get() == True and self.case.get() == True):			self.labelCaseFrom["state"] = "normal"			self.entryCaseFrom["state"] = "normal"			self.labelCaseTo["state"] = "normal"			self.entryCaseTo["state"] = "normal"		else:			self.labelCaseFrom["state"] = "disabled"			self.entryCaseFrom["state"] = "disabled"			self.labelCaseTo["state"] = "disabled"			self.entryCaseTo["state"] = "disabled"### MAIN #######################################################################if (__name__=="__main__"):	Renamer().Run()